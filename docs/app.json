[{"name":"app.R","content":"library(shiny)\nlibrary(munsell)\nlibrary(MASS)\nlibrary(ggplot2)\nlibrary(ggExtra)\nlibrary(ggiraph)\nlibrary(stringr)\n\n\nui <- fixedPage(\n  tags$head(\n    tags$style(HTML(\"\n      table {\n      border-collapse: collapse;\n      }\n                    \n      td, th {\n      border: 1px solid #ddd;\n      padding: 6px;\n      }\n                    \n      th {\n      padding-top: 6px;\n      padding-bottom: 6px;\n      text-align: left;\n      background-color: #808080;\n      color: white;\n      }\n\n      tr {\n      padding-top: 6px;\n      background-color: black;\n      color: white\n      }\n\n    \"))\n  ),   \n   # Application title\n   titlePanel(\"Causality and Multiple Regression\"),\n   hr(),\n   \n   fixedRow(\n\n      column(width=5,\n         wellPanel(\n           h4(\"Generate the Data:\"),\n           selectInput(\"RoleOfZ\", \"Role of Z (a dichotomous variable)\", choices=c('Noise / Alternative Cause', 'Confound / Common Cause', 'Alternative Effect', 'Mediator / Mechanism', 'Interaction / Moderator', 'Common Effect')),\n           selectInput(\"N\", \"Number of Observations\", choices=c(10,20,50,100,500,1000), selected=100),\n           radioButtons(\"DataGeneration\", \"Data Generation\",\n                        c(\"Perfect Data\" = TRUE,\n                          \"Sampled (Approximate) Data\" = FALSE)),\n           \n           hr(),\n           selectInput(\"Domain\", \"Names of Variables\", choices=c('Smoking - Heart Disease', 'Perseverence - LSAT', 'Anxiety - Depression')),\n           checkboxInput('ChooseNames', 'Edit the variable names'),\n           conditionalPanel(\n             condition = \"input.ChooseNames == true\",\n             \n             textInput(\"XLabel\", \"Name of X\", value = \"Smoking\", width = NULL),\n             textInput(\"YLabel\", \"Name of Y\", value = \"Heart Disease\", width = NULL, placeholder = NULL),\n             textInput(\"ZLabel\", \"Name of Z\", value = \"Diet\", width = NULL, placeholder = NULL),\n             textInput(\"ZLabelG1\", HTML('<span style=\"color:red\">Name of Z Group 1<\/span>'), value = \"Healthy Diet\", width = NULL, placeholder = NULL),\n             textInput(\"ZLabelG2\", HTML('<span style=\"color:orange\">Name of Z Group 2<\/span>'), value = \"Unhealthy Diet\", width = NULL, placeholder = NULL),\n             actionButton(\"SubmitNames\", \"Submit Names\")\n           ),\n           \n           conditionalPanel(\n             condition = '\"a\" == \"b\"',\n             numericInput(\"hiddeninput\", \"hiddeninput\", 10, min = 1, max = 1000000)\n           ),\n           \n           hr(),\n           \n           conditionalPanel(\n             condition = \"input.RoleOfZ == 'Noise / Alternative Cause'\",\n             sliderInput(\"N_SlopeXonY\", \"Influence of X on Y\", min = -3, max = 3, value = 1, step=.5),\n             sliderInput(\"N_SlopeZonY\", \"Influence of Z on Y\", min = -3, max = 3, value = 1, step=.5)\n           ),\n           conditionalPanel(\n             condition = \"input.RoleOfZ == 'Confound / Common Cause'\",\n             sliderInput(\"CC_SlopeXonY\", \"Influence of X on Y\", min = -3, max = 3, value = 1, step=.5),\n             sliderInput(\"CC_SlopeZonX\", \"Influence of Z on X\", min = -3, max = 3, value = 3, step=.5),\n             sliderInput(\"CC_SlopeZonY\", \"Influence of Z on Y\", min = -3, max = 3, value = 3, step=.5)\n           ),\n           conditionalPanel(\n             condition = \"input.RoleOfZ == 'Alternative Effect'\",\n             sliderInput(\"AE_SlopeXonY\", \"Influence of X on Y\", min = -3, max = 3, value = 1, step=.5),\n             sliderInput(\"AE_SlopeXonZ\", \"Influence of X on Z\", min = -3, max = 3, value = 1, step=.5)\n           ),\n           conditionalPanel(\n             condition = \"input.RoleOfZ == 'Mediator / Mechanism'\",\n             sliderInput(\"M_SlopeXonY\", \"Influence of X on Y\", min = -3, max = 3, value = 1, step=.5),\n             sliderInput(\"M_SlopeXonZ\", \"Influence of X on Z\", min = -3, max = 3, value = 3, step=.5),\n             sliderInput(\"M_SlopeZonY\", \"Influence of Z on Y\", min = -3, max = 3, value = 3, step=.5)\n           ),\n           conditionalPanel(\n             condition = \"input.RoleOfZ == 'Common Effect'\",\n             sliderInput(\"CE_SlopeXonY\", \"Influence of X on Y\", min = -3, max = 3, value = 0, step=.5),\n             sliderInput(\"CE_SlopeXonZ\", \"Influence of X on Z\", min = -3, max = 3, value = 3, step=.5),\n             sliderInput(\"CE_SlopeYonZ\", \"Influence of Y on Z\", min = -3, max = 3, value = 3)\n           ),\n           conditionalPanel(\n             condition = \"input.RoleOfZ == 'Interaction / Moderator'\",\n             sliderInput(\"I_SlopeXonY\", \"Influence of X on Y\", min = -3, max = 3, value = -1, step=.5),\n             sliderInput(\"I_SlopeZonY\", \"Influence of Z on Y\", min = -3, max = 3, value = 0, step=.5),\n             sliderInput(\"I_Interaction\", \"Interaction X and Z on Y\", min = -3, max = 3, value = 2, step=.5)\n           ),\n           actionButton(\"ResampleData\", \"Resample Data\")\n           ),\n\n         # hr(),\n         \n         wellPanel(\n           h4(\"Causal Structure Graph:\"),\n           uiOutput(\"CSGraph\", width = \"210px\", height = \"250px\")\n         )\n         \n      ),\n      \n      \n      # Show a plot of the generated distribution\n      column(width=7,\n         h4(\"Plot the Data:\"),\n         # plotOutput(\"distPlot\", width = \"400px\", height = \"400px\"), #old version that is static width and height of graph also needs to be set below\n         girafeOutput(\"distPlot\", width = \"400px\", height = \"400px\"), #old version that is static width and height of graph also needs to be set below\n         \n         \n         fixedRow(\n           column(width=4,\n                  radioButtons(\"GroupColors\", \"Colors for Z:\",\n                               c(\"Separate Colors\", \"All One Color\"))),\n           column(width=8, \n                  uiOutput(\"KeyText\"))\n         ),\n\n         hr(),\n         h4(\"What to Analyze?\"),\n         wellPanel(checkboxInput('AnalyzeXRegressZ', \"[ X~Z ]: Simple Relation between Z and X\"), \n                   conditionalPanel(\n                     condition = \"input.AnalyzeXRegressZ == true\",\n                     uiOutput(\"simple_relation_Z_X_HTML\")\n                     )\n                   ),\n         wellPanel(checkboxInput('AnalyzeYRegressZ', '[ Y~Z ]: Simple Relation between Z and Y'), \n                   conditionalPanel(\n                     condition = \"input.AnalyzeYRegressZ == true\",\n                     # verbatimTextOutput(\"simple_relation_Z_Y\"))\n                     uiOutput(\"simple_relation_Z_Y_HTML\")\n                   )\n         ),\n         wellPanel(checkboxInput('AnalyzeYRegressX', '[ Y~X ]: Simple Relation between X and Y'), \n                   conditionalPanel(\n                     condition = \"input.AnalyzeYRegressX == true\",\n                     # verbatimTextOutput(\"current_regression_unconditional\")\n                     uiOutput(\"current_regression_unconditional_HTML\")\n                  )\n         ),\n         wellPanel(checkboxInput('AnalyzeYRegressXPlusZ', '[ Y~X+Z ]: Regression using X and Z to predict Y'), \n                   conditionalPanel(\n                     condition = \"input.AnalyzeYRegressXPlusZ == true\",\n                     # verbatimTextOutput(\"current_regression_conditional\")\n                     uiOutput(\"current_regression_conditional_HTML\")\n                   )\n         ),\n         wellPanel(checkboxInput('AnalyzeInteraction', '[ Y~X+Z+X*Z ]: Regression using X and Z and interaction to predict Y'), \n                   conditionalPanel(\n                     condition = \"input.AnalyzeInteraction == true\",\n                     # verbatimTextOutput(\"asdfasfd\")\n                     uiOutput(\"current_regression_interaction_HTML\")\n                   )\n         )\n      ),\n      fixedRow(\n        HTML(\"<p>Made by <a href='http://www.lrdc.pitt.edu/rottman/' target='_blank'>Ben Rottman<\/a>. Feel free to reach out!<\/p><p>Part of <a href='https://canvas.pitt.edu/courses/124970' target='_blank'>Open Source RESEARCH METHODS for the Social Sciences (osRMss)<\/a>.<\/p><p>This material is based upon work supported by the National Science Foundation under Grant Number 1651330. Any opinions, findings, and conclusions or recommendations expressed in this material are those of the author(s) and do not necessarily reflect the views of the National Science Foundation.<\/p>\")\n      )\n   )\n)\n\n\n# Define server logic required to draw a histogram\nserver <- function(input, output, session) {\n  \n  XNAME<-   eventReactive(c(input$SubmitNames, input$hiddeninput), {input$XLabel}, ignoreNULL = FALSE)\n  YNAME<-   eventReactive(c(input$SubmitNames, input$hiddeninput), {input$YLabel}, ignoreNULL = FALSE)\n  ZNAME<-   eventReactive(c(input$SubmitNames, input$hiddeninput), {input$ZLabel}, ignoreNULL = FALSE)\n  ZNAMEG1<- eventReactive(c(input$SubmitNames, input$hiddeninput), {input$ZLabelG1}, ignoreNULL = FALSE)\n  ZNAMEG2<- eventReactive(c(input$SubmitNames, input$hiddeninput), {input$ZLabelG2}, ignoreNULL = FALSE)\n  \n  observe({\n    r <- input$RoleOfZ\n    s <- input$Domain\n    updateNumericInput(session, \"hiddeninput\", value = runif(1, 0, 1000000))\n  })\n  \n  # http://shiny.rstudio.com/gallery/update-input-demo.html\n  # observe({\n  #   x <- input$RoleOfZ\n  #   updateCheckboxInput(session, \"AnalyzeXRegressZ\", label = paste('[ X~Z ]: Simple Relation between Z (', ZNAME(), ') and X (', XNAME(), ')', sep=''))\n  #   updateCheckboxInput(session, \"AnalyzeYRegressZ\", label = paste('[ Y~Z ]: Simple Relation between Z (', ZNAME(), ') and Y (', YNAME(), ')', sep=''))\n  #   updateCheckboxInput(session, \"AnalyzeYRegressX\", label = paste('[ Y~X ]: Simple Relation between X (', XNAME(), ') and Y (', YNAME(), ')', sep=''))\n  #   updateCheckboxInput(session, \"AnalyzeYRegressXPlusZ\", label = paste('[ Y~X+Z ]: Regression using X (', XNAME(), ') and Z (', ZNAME(), ') to predict Y (', YNAME(), '). This regression  finds the lines of best fit for G1 and G2 separately, with the caveat that these two lines must be parallel.', sep=''))\n  #   # updateCheckboxInput(session, \"AnalyzeYRegressInteraction\", label = 'asdfasdfasf')\n  #     })\n\n  \n  # paste('[ Y~X+Z+X*Z ]:asdfasdf Regression using X (', XNAME(), ') and Z (', ZNAME(), ') asdfasdfand interaction to predict Yasdfasdf (', YNAME(), '). This regression finds the lines of best fit for G1 and G2 separately, and they do not need to be parallel.', sep='')\n  \n  observe({\n    if (input$RoleOfZ == 'Noise / Alternative Cause'){\n      if(input$Domain == 'Smoking - Heart Disease'){\n        L <- c(\"Smoking\", \"Heart Disease\", \"Diet\", \"Healthy Diet\", \"Unhealthy Diet\")\n      } else if (input$Domain == 'Perseverence - LSAT'){\n        L <- c(\"Perseverence\", \"LSAT Score\", \"Sleep\", \"More Sleep\", \"Less Sleep\")\n      } else if (input$Domain == 'Anxiety - Depression'){\n        L <- c(\"Anxiety\", \"Depression\", \"Insomnia\", \"Sleep Well\", \"Sleep Poorly\")\n      }\n      \n      updateTextInput(session, \"XLabel\", value = L[1])\n      updateTextInput(session, \"YLabel\", value = L[2])\n      updateTextInput(session, \"ZLabel\", value = L[3])\n      updateTextInput(session, \"ZLabelG1\", value = L[4])\n      updateTextInput(session, \"ZLabelG2\", value = L[5])\n      \n\n    } else if (input$RoleOfZ == 'Confound / Common Cause'){\n      if(input$Domain == 'Smoking - Heart Disease'){\n        L <- c(\"Smoking\", \"Heart Disease\", \"Stress\", \"Not Stressed\", \"Stressed\")\n      } else if (input$Domain == 'Perseverence - LSAT'){\n        L <- c(\"Perseverence\", \"LSAT Score\", \"Stress\", \"More Stress\", \"Less Stress\")\n      } else if (input$Domain == 'Anxiety - Depression'){\n        L <- c(\"Anxiety\", \"Depression\", \"Insomnia\", \"Sleep Well\", \"Sleep Poorly\")\n      }\n      \n      updateTextInput(session, \"XLabel\", value = L[1])\n      updateTextInput(session, \"YLabel\", value = L[2])\n      updateTextInput(session, \"ZLabel\", value = L[3])\n      updateTextInput(session, \"ZLabelG1\", value = L[4])\n      updateTextInput(session, \"ZLabelG2\", value = L[5])\n    \n    } else if (input$RoleOfZ == 'Mediator / Mechanism'){\n      if(input$Domain == 'Smoking - Heart Disease'){\n        L <- c(\"Smoking\", \"Heart Disease\", \"Endothelium Damage\", \"Endothelium Not Damaged\", \"Endothelium Damaged\")\n      } else if (input$Domain == 'Perseverence - LSAT'){\n        L <- c(\"Perseverence\", \"LSAT Score\", \"Study\", \"Little Studying\", \"Lots of Studying\")\n      } else if (input$Domain == 'Anxiety - Depression'){\n        L <- c(\"Anxiety\", \"Depression\", \"Insomnia\", \"Sleep Well\", \"Sleep Poorly\")\n      }\n      \n      updateTextInput(session, \"XLabel\", value = L[1])\n      updateTextInput(session, \"YLabel\", value = L[2])\n      updateTextInput(session, \"ZLabel\", value = L[3])\n      updateTextInput(session, \"ZLabelG1\", value = L[4])\n      updateTextInput(session, \"ZLabelG2\", value = L[5])\n\n    } else if (input$RoleOfZ == 'Alternative Effect'){\n      if(input$Domain == 'Smoking - Heart Disease'){\n        L <- c(\"Smoking\", \"Heart Disease\", \"Teeth Color\", \"Normal Teeth\", \"Yellow Teeth\")\n      } else if (input$Domain == 'Perseverence - LSAT'){\n        L <- c(\"Perseverence\", \"LSAT Score\", \"Excercise Frequency\", \"Infrequent\", \"Frequent\") #stress could affect perseverance through procrastination\n      } else if (input$Domain == 'Anxiety - Depression'){\n        L <- c(\"Anxiety\", \"Depression\", \"Insomnia\", \"Sleep Well\", \"Sleep Poorly\")\n      }\n      \n      updateTextInput(session, \"XLabel\", value = L[1])\n      updateTextInput(session, \"YLabel\", value = L[2])\n      updateTextInput(session, \"ZLabel\", value = L[3])\n      updateTextInput(session, \"ZLabelG1\", value = L[4])\n      updateTextInput(session, \"ZLabelG2\", value = L[5])\n      \n    } else if (input$RoleOfZ == 'Common Effect'){\n      if(input$Domain == 'Smoking - Heart Disease'){\n        L <- c(\"Smoking\", \"Heart Disease\", \"Death\", \"Normal Death\", \"Early Death\")\n      } else if (input$Domain == 'Perseverence - LSAT'){\n        L <- c(\"Perseverence\", \"LSAT Score\", \"Law School Admission\", \"Not Admitted\", \"Admitted\") #stress could affect perseverance through procrastination\n      } else if (input$Domain == 'Anxiety - Depression'){\n        L <- c(\"Anxiety\", \"Depression\", \"Insomnia\", \"Sleep Well\", \"Sleep Poorly\")\n      }\n      \n      updateTextInput(session, \"XLabel\", value = L[1])\n      updateTextInput(session, \"YLabel\", value = L[2])\n      updateTextInput(session, \"ZLabel\", value = L[3])\n      updateTextInput(session, \"ZLabelG1\", value = L[4])\n      updateTextInput(session, \"ZLabelG2\", value = L[5])\n      \n    } else if (input$RoleOfZ == 'Interaction / Moderator'){\n      if(input$Domain == 'Smoking - Heart Disease'){\n        L <- c(\"Smoking\", \"Heart Disease\", \"Activity\", \"Active\", \"Sedentary\")\n      } else if (input$Domain == 'Perseverence - LSAT'){\n        L <- c(\"Perseverence\", \"LSAT Score\", \"Practice Tests\", \"Do Not Take Practice Tests\", \"Take Practice Tests\")\n      } else if (input$Domain == 'Anxiety - Depression'){\n        L <- c(\"Anxiety\", \"Depression\", \"Insomnia\", \"Sleep Well\", \"Sleep Poorly\")\n      }\n      \n      updateTextInput(session, \"XLabel\", value = L[1])\n      updateTextInput(session, \"YLabel\", value = L[2])\n      updateTextInput(session, \"ZLabel\", value = L[3])\n      updateTextInput(session, \"ZLabelG1\", value = L[4])\n      updateTextInput(session, \"ZLabelG2\", value = L[5])\n      \n    }\n  })\n  \n  \n  currentDF <- reactive({\n    input$ResampleData\n    N <- as.integer(input$N)\n\n    if(input$RoleOfZ == 'Noise / Alternative Cause'){\n      SlopeXonY<-input$N_SlopeXonY\n      SlopeZonY<-input$N_SlopeZonY\n      VarNoiseX<-1\n      VarNoiseZ<-1\n      VarNoiseY<-1\n      \n      sigma<-matrix(rep(0,16),4,4)\n      sigma[1,1]<-VarNoiseX\n      sigma[2,2]<-VarNoiseX\n      sigma[3,3]<-VarNoiseY\n      sigma[4,4]<-VarNoiseY\n      d<-mvrnorm(n=as.integer(N/2), mu=rep(0,4), sigma, empirical= input$DataGeneration) #using empirical here makes almost perfectly independent variables\n      \n      NoiseX<-c(d[,1],d[,2])\n      NoiseY<-c(d[,3],d[,4])\n      \n      \n      Z<-c(rep(-.5,N/2),rep(.5,N/2))*VarNoiseZ\n      X<-NoiseX\n      Y<-SlopeXonY*X + SlopeZonY*Z + NoiseY\n      \n      Z<-Z>mean(Z)\n      Z[Z==FALSE]<-\"Group 1\"\n      Z[Z==TRUE]<-\"Group 2\"\n    }\n    \n    if(input$RoleOfZ == 'Confound / Common Cause'){\n      SlopeXonY<-input$CC_SlopeXonY\n      SlopeZonX<-input$CC_SlopeZonX\n      SlopeZonY<-input$CC_SlopeZonY\n      VarNoiseX<-1\n      VarNoiseZ<-1\n      VarNoiseY<-1\n      \n      sigma<-matrix(rep(0,16),4,4)\n      sigma[1,1]<-VarNoiseX\n      sigma[2,2]<-VarNoiseX\n      sigma[3,3]<-VarNoiseY\n      sigma[4,4]<-VarNoiseY\n      d<-mvrnorm(n=as.integer(N/2), mu=rep(0,4), sigma, empirical=input$DataGeneration) #using empirical here makes almost perfectly independent variables\n      \n      NoiseX<-c(d[,1],d[,2])\n      NoiseY<-c(d[,3],d[,4])\n      \n      Z<-c(rep(-.5,N/2),rep(.5,N/2))*VarNoiseZ\n      X<-SlopeZonX*Z + NoiseX\n      Y<-SlopeXonY*X + SlopeZonY*Z + NoiseY\n      \n      Z<-Z>mean(Z)\n      Z[Z==FALSE]<-\"Group 1\"\n      Z[Z==TRUE]<-\"Group 2\"\n    }\n    \n    #I used the same model to generate the mechanism as the confound, even though technically it is not generated from causes to effects\n    #The reason is that these two models are markov equivalent so the data should work either way \n    #Also, it is confusing to generate a binary variable (Z) when it is not exogenous - would have to designate a cutoff, which essentially adds noise into the system and messes with the parameters\n    #Possibley come back to this and instead of having a binary variable as 1/0, actually make it a multiple of X, so it could be something like +2-/2 if X->Z link is 2, or +3/-3 if X->Z link is 3. I think this would fix the mediation problem.\n    if(input$RoleOfZ == 'Mediator / Mechanism'){\n      SlopeXonY<-input$M_SlopeXonY\n      SlopeZonX<-input$M_SlopeXonZ \n      SlopeZonY<-input$M_SlopeZonY\n      VarNoiseX<-1\n      VarNoiseZ<-1\n      VarNoiseY<-1\n      \n      sigma<-matrix(rep(0,16),4,4)\n      sigma[1,1]<-VarNoiseX\n      sigma[2,2]<-VarNoiseX\n      sigma[3,3]<-VarNoiseY\n      sigma[4,4]<-VarNoiseY\n      d<-mvrnorm(n=as.integer(N/2), mu=rep(0,4), sigma, empirical=input$DataGeneration) #using empirical here makes almost perfectly independent variables\n      \n      NoiseX<-c(d[,1],d[,2])\n      NoiseY<-c(d[,3],d[,4])\n      \n      Z<-c(rep(-.5,N/2),rep(.5,N/2))\n      X<-SlopeZonX*Z + NoiseX\n      Y<-SlopeXonY*X + SlopeZonY*Z + NoiseY\n      \n      Z<-Z>mean(Z)\n      Z[Z==FALSE]<-\"Group 1\"\n      Z[Z==TRUE]<-\"Group 2\"\n    }\n\n    if(input$RoleOfZ == 'Alternative Effect'){\n      #technically I am modeling this like Z->X->Y because if I do Y<-X->Z, then have to deal with Z being binary and the simple relation between X and Z gets messed up; see the note above for mediation model. The same note applies here as well\n      #However, because Z->X->Y and Z<-X->Y are Markov equivalent, the parameters will work out ok.\n      SlopeXonY<-input$AE_SlopeXonY\n      SlopeZonX<-input$AE_SlopeXonZ #see note above - doing a similar thing for the mechanism / mediator case\n      VarNoiseX<-1\n      VarNoiseZ<-1\n      VarNoiseY<-1\n      \n      sigma<-matrix(rep(0,16),4,4)\n      sigma[1,1]<-VarNoiseX\n      sigma[2,2]<-VarNoiseX\n      sigma[3,3]<-VarNoiseY\n      sigma[4,4]<-VarNoiseY\n      d<-mvrnorm(n=as.integer(N/2), mu=rep(0,4), sigma, empirical=input$DataGeneration) #using empirical here makes almost perfectly independent variables\n      \n      NoiseX<-c(d[,1],d[,2])\n      NoiseY<-c(d[,3],d[,4])\n      \n      Z<-c(rep(-.5,N/2),rep(.5,N/2))\n      X<-SlopeZonX*Z + NoiseX\n      Y<-SlopeXonY*X + NoiseY\n      \n      Z<-Z>mean(Z)\n      Z[Z==FALSE]<-\"Group 1\"\n      Z[Z==TRUE]<-\"Group 2\"\n    }\n    \n    if(input$RoleOfZ == 'Common Effect'){\n      SlopeXonY<-input$CE_SlopeXonY\n      SlopeXonZ<-input$CE_SlopeXonZ\n      SlopeYonZ<-input$CE_SlopeYonZ\n      VarNoiseX<-1\n      VarNoiseZ<-1\n      VarNoiseY<-1\n      \n      sigma<-matrix(rep(0,9),3,3)\n      sigma[1,1]<-VarNoiseX\n      sigma[2,2]<-VarNoiseZ\n      sigma[3,3]<-VarNoiseY\n      d<-mvrnorm(n=as.integer(N), mu=rep(0,3), sigma, empirical=input$DataGeneration) #using empirical here makes almost perfectly independent variables\n      \n      X<-d[,1]\n      NoiseZ<-d[,2]\n      NoiseY<-d[,3]\n      \n      Y<-SlopeXonY*X + NoiseY\n      Z<-SlopeXonZ*X + SlopeYonZ*Y + NoiseZ\n      Z<-Z>mean(Z)\n      Z[Z==FALSE]<-\"Group 1\"\n      Z[Z==TRUE]<-\"Group 2\"\n    }\n    \n    if(input$RoleOfZ == 'Interaction / Moderator'){\n      SlopeXonY<-input$I_SlopeXonY\n      SlopeZonY<-input$I_SlopeZonY\n      Interaction<-input$I_Interaction\n      VarNoiseX<-1\n      VarNoiseZ<-1\n      VarNoiseY<-1\n      \n      sigma<-matrix(rep(0,16),4,4)\n      sigma[1,1]<-VarNoiseX\n      sigma[2,2]<-VarNoiseX\n      sigma[3,3]<-VarNoiseY\n      sigma[4,4]<-VarNoiseY\n      d<-mvrnorm(n=as.integer(N/2), mu=rep(0,4), sigma, empirical= input$DataGeneration)\n      \n      NoiseX<-c(d[,1],d[,2])\n      NoiseY<-c(d[,3],d[,4])\n      \n      Z<-c(rep(0,N/2),rep(1,N/2))*VarNoiseZ\n      X<-NoiseX\n      Y<-SlopeXonY*X + SlopeZonY*Z + Interaction*X*Z + NoiseY\n      \n      Z<-Z>mean(Z)\n      Z[Z==FALSE]<-\"Group 1\"\n      Z[Z==TRUE]<-\"Group 2\"\n    }\n    \n    df<-data.frame(X,Y,Z)\n    return(df)\n  })\n  \n   simple_relation_Z_X <- reactive({ summary(lm(X~Z, data=currentDF() )) })\n   simple_relation_Z_Y <- reactive({ summary(lm(Y~Z, data=currentDF() )) })\n   current_regression_unconditional <- reactive({ summary(lm(Y~X, data=currentDF() )) })  \n   current_regression_conditional <- reactive({ summary(lm(Y~X+Z, data=currentDF() )) })\n   current_regression_interaction <- reactive({ summary(lm(Y~X*Z, data=currentDF() )) })\n   \n   \n   output$distPlot <- renderGirafe({\n     df<-currentDF()\n     \n     #unconditional\n     regression_unconditional<-current_regression_unconditional()\n     intercept_unconditional<-coefficients(regression_unconditional)[1,1]\n     XSlope_unconditional<-coefficients(regression_unconditional)[2,1]\n     \n     #conditional\n     regression_conditional<-current_regression_conditional()\n     intercept_conditional<-coefficients(regression_conditional)[1,1]\n     XSlope_conditional<-coefficients(regression_conditional)[2,1]\n     ZTrueEffect_conditional<-coefficients(regression_conditional)[3,1]\n\n     #interaction\n     regression_interaction<-current_regression_interaction()\n     intercept_I_G1<-        coefficients(regression_interaction)[1,1]\n     XSlope_I_G1<-           coefficients(regression_interaction)[2,1]\n     intercept_diff_I_G2<-   coefficients(regression_interaction)[3,1]\n     interaction_I<-         coefficients(regression_interaction)[4,1]\n     \n     # Intercepts\n     df_intercept_unconditional <-data.frame(X=c(0), Y=c(intercept_unconditional))\n     df_intercept_conditional   <-data.frame(X=c(0), Y=c(intercept_conditional))\n     df_intercept_interaction   <-data.frame(X=c(0), Y=c(intercept_I_G1))\n     \n     # CI and Prediction intervals\n     # http://www2.stat.duke.edu/~tjl13/s101/slides/unit6lec3H.pdf\n     # https://rstudio-pubs-static.s3.amazonaws.com/71339_d0b8346f41314979bc394448c5d60d86.html\n     \n     # ConfidenceIntervals for Unconditional\n     tX<-seq(min(df$X), max(df$X), 0.05)\n     CI_Unconditional_Temp <- data.frame(X = tX)\n     CI_Unconditional <- predict(lm(Y~X, data=df), CI_Unconditional_Temp, interval=\"confidence\",level = 0.95)\n     CI_Unconditional <- cbind(CI_Unconditional, CI_Unconditional_Temp)\n     \n     # Confidence Intervals for Conditional\n     temp1<-subset(df, Z=='Group 1')\n     tX<-seq(min(temp1$X), max(temp1$X), 0.05)\n     CI_Conditional_Temp_ZFalse <- data.frame(X = tX, Z = rep('Group 1',length(tX)))\n     CI_Conditional_ZFalse <- predict(lm(Y~X+Z, data=df), CI_Conditional_Temp_ZFalse, interval=\"confidence\",level = 0.95)\n     CI_Conditional_ZFalse <- cbind(CI_Conditional_ZFalse, CI_Conditional_Temp_ZFalse)\n     \n     temp2<-subset(df, Z=='Group 2')\n     tX<-seq(min(temp2$X), max(temp2$X), 0.05)\n     CI_Conditional_Temp_ZTrue <- data.frame(X = tX, Z = rep('Group 2',length(tX)))\n     CI_Conditional_ZTrue <- predict(lm(Y~X+Z, data=df), CI_Conditional_Temp_ZTrue, interval=\"confidence\",level = 0.95)\n     CI_Conditional_ZTrue <- cbind(CI_Conditional_ZTrue, CI_Conditional_Temp_ZTrue)\n     \n     # Confidence Intervals for Interaction\n     temp3<-subset(df, Z=='Group 1')\n     tX<-seq(min(temp3$X), max(temp3$X), 0.05)\n     CI_Interaction_Temp_ZFalse <- data.frame(X = tX, Z = rep('Group 1',length(tX)))\n     CI_Interaction_ZFalse <- predict(lm(Y~X, data=temp3), CI_Interaction_Temp_ZFalse, interval=\"confidence\",level = 0.95)\n     CI_Interaction_ZFalse <- cbind(CI_Interaction_ZFalse, CI_Interaction_Temp_ZFalse)\n     \n     temp4<-subset(df, Z=='Group 2')\n     tX<-seq(min(temp4$X), max(temp4$X), 0.05)\n     CI_Interaction_Temp_ZTrue <- data.frame(X = tX, Z = rep('Group 2',length(tX)))\n     CI_Interaction_ZTrue <- predict(lm(Y~X, data=temp4), CI_Interaction_Temp_ZTrue, interval=\"confidence\",level = 0.95)\n     CI_Interaction_ZTrue <- cbind(CI_Interaction_ZTrue, CI_Interaction_Temp_ZTrue)\n     \n     # dots for the curve for the interaction\n     dot_Interaction_G1_X <- 1\n     dot_Interaction_G1_Y <- intercept_I_G1 + 1*XSlope_I_G1\n     dot_Interaction_G2_X <- 1\n     dot_Interaction_G2_Y <- intercept_I_G1 + intercept_diff_I_G2 + 1*(XSlope_I_G1+interaction_I) + .01 #.01 added so points are never exactly the same\n     \n     df_int_curve<-data.frame(x1=dot_Interaction_G1_X, x2=dot_Interaction_G2_X, y1=dot_Interaction_G1_Y, y2=dot_Interaction_G2_Y)\n     \n     # otherwise curve for interaction switches on the left vs. right sided curve\n     if (dot_Interaction_G1_Y < dot_Interaction_G2_Y) {\n       curvature_int <- .3\n       show_interaction_curve <- TRUE\n     } else if (dot_Interaction_G1_Y > dot_Interaction_G2_Y){\n       curvature_int <- -.3\n       show_interaction_curve <- TRUE\n     } else if (dot_Interaction_G1_Y == dot_Interaction_G2_Y){\n       show_interaction_curve <- FALSE\n     }\n     \n     # Conditional Effect of Z in Interaction Model\n     dfvert_int <- data.frame(x1 = 0, x2 = 0, Z1 = intercept_I_G1, Z2 = intercept_I_G1 + intercept_diff_I_G2)\n     # data frame for two dots for vertical line\n     df_vertical_int<-data.frame(X=c(0,0), Y=c(intercept_I_G1, intercept_I_G1 + intercept_diff_I_G2))\n          \n     \n     # Conditional Effect of Z\n     # data frame for the vertical line\n     dfvert <- data.frame(x1 = 0, x2 = 0, Z1 = intercept_conditional, Z2 = intercept_conditional + ZTrueEffect_conditional)\n     # data frame for two dots for vertical line\n     df_vertical<-data.frame(X=c(0,0), Y=c(intercept_conditional, intercept_conditional + ZTrueEffect_conditional))\n\n     # help with naming groups\n     # https://stackoverflow.com/questions/18060116/adding-legend-to-ggplot-when-lines-were-added-manually\n     # note - color needs to be inside aes call for this to work\n     \n     # data frame for two dots for AnalyzeXRegressZ\n     df1AnalyzeXRegressZ<-data.frame(Y=c(6,6), X=c(simple_relation_Z_X()$coefficients[1,1]-.02, simple_relation_Z_X()$coefficients[1,1] + simple_relation_Z_X()$coefficients[2,1]))\n     # data frame for the vertical line for AnalyzeYRegressZ\n     df2AnalyzeXRegressZ <- data.frame(y1 = 6, y2 = 6, x1 = simple_relation_Z_X()$coefficients[1,1]-.02, x2 = simple_relation_Z_X()$coefficients[1,1] + simple_relation_Z_X()$coefficients[2,1])\n     # data frame for two dots for AnalyzeYRegressZ\n     # df1AnalyzeYRegressZ<-data.frame(X=c(4,4), Y=c(1, 2))\n     df1AnalyzeYRegressZ<-data.frame(X=c(6,6), Y=c(simple_relation_Z_Y()$coefficients[1,1]-.02, simple_relation_Z_Y()$coefficients[1,1] + simple_relation_Z_Y()$coefficients[2,1]))\n     # data frame for the vertical line for AnalyzeYRegressZ\n     df2AnalyzeYRegressZ <- data.frame(x1 = 6, x2 = 6, y1 = simple_relation_Z_Y()$coefficients[1,1]-.02, y2 = simple_relation_Z_Y()$coefficients[1,1] + simple_relation_Z_Y()$coefficients[2,1]) \n\n     # first plot\n     p <- ggplot(df, aes(X, Y))\n     p <- p + labs(x = paste('X (', XNAME(), ')', sep=''), y=paste('Y (', YNAME(), ')', sep='') )\n     \n     # One of two colors for dots\n     if (input$GroupColors==\"Separate Colors\"){\n       p <- p + geom_point(aes(color = Z), size=2)\n       p <- p + scale_color_manual(values=c(\"Group 1\"=\"red\", \"Group 2\"=\"orange\", \"Overall\"=\"purple\", \"Effect of Z\"=\"green\"),\n                                   labels=c('Group 1'=ZNAMEG1(),\n                                            'Group 2'=ZNAMEG2(),\n                                            \"Overall\"=paste( \"Simple effect of X (\", XNAME(), \")\", sep=\"\"),\n                                            \"Effect of Z\"=paste(\"Effect of Z (\", ZNAME(), \")\", sep=\"\")\n                                            ),\n                                   name='')\n     } else if (input$GroupColors==\"All One Color\"){\n       p <- p + geom_point(data=df, aes(X, Y, color = Z), alpha=0)\n       p <- p + geom_point(data=df, aes(X, Y), color=\"purple\", alpha=1)\n     }\n\n     p <- p + theme(axis.title=element_text(size=14),\n                    legend.position=\"none\",\n                    panel.grid.minor.x = element_blank(),\n                    panel.grid.minor.y = element_blank(),\n                    plot.margin = unit(c(.1,.1,.1,.1), \"cm\")) #reduce spacing around legend\n\n     \n     # axes\n     p<- p + scale_x_continuous(breaks=c(-6:6), lim=c(-6,6))\n     p<- p + scale_y_continuous(breaks=c(-6:6), lim=c(-6,6))\n\n     #Simple X~Z and Y~Z\n     if((input$AnalyzeXRegressZ == TRUE) & (input$AnalyzeYRegressZ == TRUE)){\n       p <- p + geom_vline(xintercept= simple_relation_Z_X()$coefficients[1,1]-.02, color=\"red\", size=1.5)\n       p <- p + geom_vline(xintercept= simple_relation_Z_X()$coefficients[1,1] + simple_relation_Z_X()$coefficients[2,1], color=\"orange\", size=1.5)\n\n       p <- p + geom_hline(yintercept= simple_relation_Z_Y()$coefficients[1,1]-.02, color=\"red\", size=1.5)\n       p <- p + geom_hline(yintercept= simple_relation_Z_Y()$coefficients[1,1] + simple_relation_Z_Y()$coefficients[2,1], color=\"orange\", size=1.5)\n       \n       p <- p + geom_point(aes(x=X, y=Y), size=3, color = \"black\", data=df1AnalyzeXRegressZ)\n       p <- p + geom_segment(aes(x = x1, y = y1, xend = x2, yend = y2), size=1.5, data = df2AnalyzeXRegressZ, color='black', linetype=\"dashed\")\n       \n       p <- p + geom_point(aes(x=X, y=Y), size=3, color = \"black\", data=df1AnalyzeYRegressZ)\n       p <- p + geom_segment(aes(x = x1, y = y1, xend = x2, yend = y2), size=1.5, data = df2AnalyzeYRegressZ, color='black', linetype=\"dotted\")\n       \n       p <- p + geom_rug(aes(color = Z), sides='rt')\n\n     }\n     \n     #Simple X~Z\n     else if (input$AnalyzeXRegressZ == TRUE){\n       p <- p + geom_vline_interactive(aes(tooltip = \"G1 Mean\", xintercept= simple_relation_Z_X()$coefficients[1,1]-.02,), color=\"red\", linewidth=1.5)\n       p <- p + geom_vline_interactive(aes(tooltip = \"G2 Mean\", xintercept= simple_relation_Z_X()$coefficients[1,1] + simple_relation_Z_X()$coefficients[2,1]), color=\"orange\", linewidth=1.5)\n       \n       p <- p + geom_point(aes(x=X, y=Y, tooltip = X), size=3, color = \"black\", data=df1AnalyzeXRegressZ)\n       p <- p + geom_segment_interactive(aes(tooltip = \"Difference Between Means\", x = x1, y = y1, xend = x2, yend = y2), size=1.5, data = df2AnalyzeXRegressZ, color='black', linetype=\"dashed\")\n       \n       p <- p + geom_rug(aes(color = Z), sides='t')\n     }\n     \n     #Simple Y~Z\n     else if (input$AnalyzeYRegressZ == TRUE){\n       p <- p + geom_hline_interactive(aes(tooltip = \"G1 Mean\", yintercept= simple_relation_Z_Y()$coefficients[1,1]-.02), color=\"red\", linewidth=1.5)\n       p <- p + geom_hline_interactive(aes(tooltip = \"G2 Mean\", yintercept= simple_relation_Z_Y()$coefficients[1,1] + simple_relation_Z_Y()$coefficients[2,1]), color=\"orange\", linewidth=1.5)\n\n       p <- p + geom_point(aes(x=X, y=Y), size=3, color = \"black\", data=df1AnalyzeYRegressZ)\n       p <- p + geom_segment_interactive(aes(tooltip = \"Difference Between Means\", x = x1, y = y1, xend = x2, yend = y2), size=1.5, data = df2AnalyzeYRegressZ, color='black', linetype=\"dotted\")\n       \n       p <- p + geom_rug(aes(color = Z), sides='r') \n     }\n\n     #Unconditional Regression Y~X\n     if (input$AnalyzeYRegressX == TRUE){\n       p <- p + geom_abline_interactive(aes(tooltip = \"Line of best fit for all the data ignoring groups.\", intercept = intercept_unconditional, slope = XSlope_unconditional, color=\"Overall\"))\n       p <- p + geom_ribbon_interactive(aes(tooltip = \"Confidence band aroud line of best fit.\", x=X, ymin=lwr, ymax=upr), inherit.aes = FALSE, fill = \"purple\", alpha = 0.4, data=CI_Unconditional)\n       p <- p + geom_point_interactive(aes(tooltip = \"Intercept for line of best fit\", x=X, y=Y), shape=3, size=5, stroke=1.5, color=\"purple\", data=df_intercept_unconditional)\n     }\n     \n     #Conditional Regression Y~X+Z\n     if (input$AnalyzeYRegressXPlusZ == TRUE){\n       #Group1\n       p <- p + geom_abline_interactive(aes(tooltip = \"Line of best fit for G1.\", intercept = intercept_conditional, slope = XSlope_conditional), color=\"red\", linetype = \"solid\")\n       p <- p + geom_ribbon_interactive(aes(tooltip = \"Confidence band aroud line of best fit for G1\", x=X, ymin=lwr, ymax=upr), inherit.aes = FALSE, fill = \"red\", alpha = 0.4, data=CI_Conditional_ZFalse)\n       #Group2\n       p <- p + geom_abline_interactive(aes(tooltip = \"Line of best fit for G2.\", intercept = intercept_conditional+ZTrueEffect_conditional, slope = XSlope_conditional), color=\"orange\", linetype = \"solid\")\n       p <- p + geom_ribbon_interactive(aes(tooltip = \"Confidence band aroud line of best fit for G2\", x=X, ymin=lwr, ymax=upr), inherit.aes = FALSE, fill = \"orange\", alpha = 0.4, data=CI_Conditional_ZTrue)\n       \n       #Vertical Line Effect of Z\n       p <- p + geom_point_interactive(aes(tooltip = \"Intercept for G2\", x=X, y=Y, color = \"Effect of Z\"), size=3, data=df_vertical)\n       p <- p + geom_segment_interactive(aes(tooltip = \"Regression weight for Z; the difference between the intercepts for G2-G1.\", x = x1, y = Z1, xend = x2, yend = Z2), size=1, data = dfvert, color='green')\n       \n       #Intercept\n       p <- p + geom_point_interactive(aes(tooltip = \"Intercept for G1\", x=X, y=Y), shape=4, size=5, stroke=1.5, color=\"black\", data=df_intercept_conditional)\n     }\n     \n     #Interaction Regression Y~X*Z\n     if (input$AnalyzeInteraction == TRUE){\n       #Group1\n       p <- p + geom_abline(intercept = intercept_I_G1, slope = XSlope_I_G1, color='red', linetype = \"solid\")\n       p <- p + geom_ribbon(aes(x=X, ymin=lwr, ymax=upr), inherit.aes = FALSE, fill = \"red\", alpha = 0.4, data=CI_Interaction_ZFalse)\n       #Group2\n       p <- p + geom_abline(intercept = (intercept_I_G1+intercept_diff_I_G2), slope = (XSlope_I_G1+interaction_I), color='orange', linetype = \"solid\")\n       p <- p + geom_ribbon(aes(x=X, ymin=lwr, ymax=upr), inherit.aes = FALSE, fill = \"orange\", alpha = 0.4, data=CI_Interaction_ZTrue)\n       #Interaction Curve\n       if (show_interaction_curve == TRUE){\n         p <- p + geom_curve(aes(x = x1, y = y1, xend = x2, yend = y2), data = df_int_curve, curvature = curvature_int, color=\"dodgerblue\", linetype = \"solid\", size=1.1)\n       }\n\n       #Vertical Line Effect of Z\n       p <- p + geom_point(aes(x=X, y=Y), size=3, data=df_vertical_int, color='yellow')\n       p <- p + geom_segment(aes(x = x1, y = Z1, xend = x2, yend = Z2), size=1, data = dfvert_int, color='yellow')\n       \n       #Intercept\n       p <- p + geom_point(aes(x=X, y=Y), shape=5, size=3, stroke=1.5, color=\"black\", data=df_intercept_interaction)\n     }\n    \n     # calls to ggMarginal must come at the very end of the graph, so going through conditional logic again\n     # if((input$AnalyzeXRegressZ == TRUE) & (input$AnalyzeYRegressZ == TRUE)){\n     #   p <- ggMarginal(p, type = c(\"density\"), groupColour = TRUE, groupFill = TRUE, size=10, margins = c(\"both\"))\n     # }\n     # else if (input$AnalyzeXRegressZ == TRUE){\n     #   p <- ggMarginal(p, type = c(\"density\"), groupColour = TRUE, groupFill = TRUE, size=10, margins = c(\"x\"))\n     # }\n     # else if (input$AnalyzeYRegressZ == TRUE){\n     #   p <- ggMarginal(p, type = c(\"density\"), groupColour = TRUE, groupFill = TRUE, size=10, margins = c(\"y\"))\n     # }\n     \n     #for ggiraph\n     girafe(ggobj = p, options = list(ggiraph::opts_toolbar(saveaspng = FALSE))\n                     )\n     #I think for this to work I need to do a renderGirafe function call like this https://posit.co/blog/shiny-dashboards-with-ggiraph-and-databases/\n     \n     # #Final return of the graph\n     # return(p)\n\n   }) \n   \n\n#### Below is the html for how all the regression tables are produced.\n## First an html table is made\n## Then certain key words are replaced dynamically based on regression results and variable names\n\n## Z~X\n   \nsimple_relation_Z_X_HTML.Model<-'\nThis regression result is essentially the same thing as running a t-test comparing the two different groups of Z on X.\n<table>\n  <tr>\n    <th style=\"text-align:left\">Predictor<\/th>\n    <th>B: difference between means<\/th>\n    <th>p-value<\/th><\/tr>\n  <tr>\n    <td style=\"text-align:left\">Z (ZNAME)<\/td>\n    <td style=\"color:white\">Z.B <br> Dashed line: - - -<\/td>\n    <td>Z.p<\/td>\n    <\/tr>\n<\/table>'\n\n\noutput$simple_relation_Z_X_HTML <- \n  renderText({str_replace_all(simple_relation_Z_X_HTML.Model,\n                              c(\"Z.B\" = toString(formatC(simple_relation_Z_X()$coefficients[2,1], \n                                                         format = 'f', digits=3)),\n                                \"Z.p\" = toString(formatC(simple_relation_Z_X()$coefficients[2,4], \n                                                         format = 'f', digits=3)),\n                                \"ZNAME\" = ZNAME()\n                                ))\n    })\n   \n\n## Z~Y\n\nsimple_relation_Z_Y_HTML.Model<-'\nThis regression result is essentially the same thing as running a t-test comparing the two different groups of Z on Y.\n<table>\n  <tr>\n    <th style=\"text-align:left\">Predictor<\/th>\n    <th>B: difference between means<\/th>\n    <th>p-value<\/th>\n  <\/tr>\n  <tr>\n    <td style=\"text-align:left\">Z (ZNAME)<\/td>\n    <td style=\"color:white\" bgcolor=\"black\">Z.B <br>Dotted line: &#8901&#8901&#8901&#8901&#8901<\/td>\n    <td>Z.p<\/td>\n  <\/tr>\n<\/table>'\n\noutput$simple_relation_Z_Y_HTML <- \n  renderText({str_replace_all(simple_relation_Z_Y_HTML.Model,\n                              c(\"Z.B\" = toString(formatC(simple_relation_Z_Y()$coefficients[2,1], \n                                                         format = 'f', digits=3)),\n                                \"Z.p\" = toString(formatC(simple_relation_Z_Y()$coefficients[2,4], \n                                                         format = 'f', digits=3)),\n                                \"ZNAME\" = ZNAME()\n                                ))\n    })\n\n## Y~X\n\ncurrent_regression_unconditional_HTML.Model<-'\nThis regression result is essentially the same thing as running a correlation between X and Y and ignoring the two groups of Z.\n<table>\n  <tr>\n    <th style=\"text-align:left\">Predictor<\/th>\n    <th>B<\/th>\n    <th>p-value<\/th>\n  <\/tr>\n  <tr>\n    <td style=\"text-align:left\">Intercept<\/td>\n    <td style=\"color:#9e37eb\">I.B &#xff0b<\/td>\n    <td>I.p<\/td>\n  <\/tr>\n  <tr>\n    <td style=\"text-align:left\">X (XNAME)<\/td>\n    <td style=\"color:#9e37eb\" bgcolor=\"black\">X.B<\/td>\n    <td>X.p<\/td>\n  <\/tr>\n<\/table>'\n\noutput$current_regression_unconditional_HTML <- \n  renderText({str_replace_all(current_regression_unconditional_HTML.Model,\n                              c(\"I.B\" = toString(formatC(current_regression_unconditional()$coefficients[1,1], \n                                                         format = 'f', digits=3)),\n                                \"I.p\" = toString(formatC(current_regression_unconditional()$coefficients[1,4], \n                                                         format = 'f', digits=3)),\n                                \"X.B\" = toString(formatC(current_regression_unconditional()$coefficients[2,1], \n                                                         format = 'f', digits=3)),\n                                \"X.p\" = toString(formatC(current_regression_unconditional()$coefficients[2,4], \n                                                         format = 'f', digits=3)),\n                                \"XNAME\" = XNAME()\n                                ))\n    })\n\n\n## Y~X+Z\n\ncurrent_regression_conditional_HTML.Model<-'\nThis regression result is similar to running two regressions, one for each of the groups of Z, but with the caveat that that the lines of best fit must have the same slopes. \n<table>\n<tr><th style=\"text-align:left\">Predictor<\/th><th>B<\/th><th>p-value<\/th><\/tr>\n<tr>\n  <td style=\"text-align:left\">Intercept<\/td>\n  <td>I.B &#x2715<\/td>\n  <td>I.p<\/td>\n<\/tr>\n<tr>\n  <td style=\"text-align:left\">X (XNAME)<\/td>\n  <td style=\"color:#FF00FF\" bgcolor=\"black\">X.B<\/td>\n  <td>X.p<\/td>\n<\/tr>\n<tr>\n  <td style=\"text-align:left\">Z (ZNAME)<\/td>\n  <td style=\"color:#00FF00\" bgcolor=\"black\">Z.B<\/td>\n  <td>Z.p<\/td>\n<\/tr>\n<\/table>'\n\noutput$current_regression_conditional_HTML <- \n  renderText({str_replace_all(current_regression_conditional_HTML.Model,\n                              c(\"I.B\" = toString(formatC(current_regression_conditional()$coefficients[1,1], \n                                                         format = 'f', digits=3)),\n                                \"I.p\" = toString(formatC(current_regression_conditional()$coefficients[1,4], \n                                                         format = 'f', digits=3)),\n                                \"X.B\" = toString(formatC(current_regression_conditional()$coefficients[2,1], \n                                                           format = 'f', digits=3)),\n                                \"X.p\" = toString(formatC(current_regression_conditional()$coefficients[2,4], \n                                                           format = 'f', digits=3)),\n                                \"Z.B\" = toString(formatC(current_regression_conditional()$coefficients[3,1], \n                                                           format = 'f', digits=3)),\n                                \"Z.p\" = toString(formatC(current_regression_conditional()$coefficients[3,4], \n                                                           format = 'f', digits=3)),\n                                \"XNAME\" = XNAME(),\n                                \"ZNAME\" = ZNAME()\n                              ))\n    })\n\n## Y~X*Z\n\ncurrent_regression_interaction_HTML.Model<-'\nThis regression now fits two different lines for the two groups of Z, and including the interaction(X*Z) allows them to have different slopes.\n<table>\n  <tr>\n    <th style=\"text-align:left\">Predictor<\/th>\n    <th>B<\/th>\n    <th>p-value<\/th>\n  <\/tr>\n  <tr>\n    <td style=\"text-align:left\">Intercept<\/td>\n    <td>I.B &#x25c7;<\/td>\n    <td>I.p<\/td>\n  <\/tr>\n  <tr>\n    <td style=\"text-align:left\">X (XNAME)<\/td>\n    <td style=\"color:red\" bgcolor=\"black\">X.B<\/td>\n    <td>X.p<\/td>\n  <\/tr>\n  <tr>\n    <td style=\"text-align:left\">Z (ZNAME)<\/td>\n    <td style=\"color:yellow\" bgcolor=\"black\">Z.B<\/td>\n    <td>Z.p<\/td>\n  <\/tr>\n  <tr>\n    <td style=\"text-align:left\">Interaction X*Z<\/td>\n    <td style=\"color:dodgerblue\" bgcolor=\"black\">Int.B<\/td>\n    <td>Int.p<\/td>\n  <\/tr>\n<\/table>'\n\noutput$current_regression_interaction_HTML <- \n  renderText({str_replace_all(current_regression_interaction_HTML.Model,\n                              c(\"I.B\" = toString(formatC(current_regression_interaction()$coefficients[1,1], \n                                                         format = 'f', digits=3)),\n                                \"I.p\" = toString(formatC(current_regression_interaction()$coefficients[1,4], \n                                                         format = 'f', digits=3)),\n                                \"X.B\" = toString(formatC(current_regression_interaction()$coefficients[2,1], \n                                                         format = 'f', digits=3)),\n                                \"X.p\" = toString(formatC(current_regression_interaction()$coefficients[2,4], \n                                                         format = 'f', digits=3)),\n                                \"Z.B\" = toString(formatC(current_regression_interaction()$coefficients[3,1], \n                                                         format = 'f', digits=3)),\n                                \"Z.p\" = toString(formatC(current_regression_interaction()$coefficients[3,4], \n                                                         format = 'f', digits=3)),\n                                \"Int.B\" = toString(formatC(current_regression_interaction()$coefficients[4,1], \n                                                         format = 'f', digits=3)),\n                                \"Int.p\" = toString(formatC(current_regression_interaction()$coefficients[4,4], \n                                                         format = 'f', digits=3)),\n                                \"XNAME\" = XNAME(),\n                                \"ZNAME\" = ZNAME()\n                              ))\n  })\n\n\n\n## The Key/Legend for the graph is made with text, not an image, and changes based on whether one or two colors are chosen\n\noutput$KeyText <-renderText({\n  if (input$GroupColors==\"Separate Colors\"){\n    KT<-('<b>Key for Z:<\/b><br>\n<table style=\"padding: 0px;\">\n  <tr>\n    <td style=\"border:0px solid white; background-color:white; color:red\">&#9679<\/td>\n    <td style=\"border:0px solid white; background-color:white; color:black\">Z Group 1 (ZNAMEG1)<\/td>\n  <\/tr>\n  <tr>\n    <td style=\"border:0px solid white; background-color:white; color:orange\">&#9679<\/td>\n    <td style=\"border:0px solid white; background-color:white; color:black\">Z Group 2 (ZNAMEG2)<\/td>\n  <\/tr>\n<\/table>\n'\n         )\n  } else if (input$GroupColors==\"All One Color\"){\n    KT<-('<b>Key for Z:<\/b><br>\n<table style=\"padding: 0px;\">\n  <tr>\n    <td style=\"border:0px solid white; background-color:white; color:#9e37eb\">&#9679<\/td>\n    <td style=\"border:0px solid white; background-color:white; color:black\">Z<\/td>\n  <\/tr>\n<\/table>\n'\n         )\n  }\n  return(str_replace_all(KT,\n                         c(\"ZNAMEG1\" = ZNAMEG1(),\n                           \"ZNAMEG2\" = ZNAMEG2()\n                           ))\n         )\n  })\n\n#### The Causal Structure Graph is made with SVG\n##   First a bunch of stuff is added.\n##   After, depending on the structure and the sliders, things are hidden and colors changed\n##   The text inside <!-- --> are comments - don't delete it!\n   \nCSGraph<-'\n<svg width=\"210px\" height=\"250px\">\n  <defs>\n<marker id=\"arrow\" markerWidth=\"10\" markerHeight=\"10\" refX=\"0\" refY=\"3\" orient=\"auto\" markerUnits=\"strokeWidth\">\n<path d=\"M0,0 L0,6 L9,3 z\" fill=\"white\" />\n<\/marker>\n<\/defs>\n<!-- The Background -->\n<rect width=\"100%\" height=\"100%\" fill=\"black\"  stroke=\"#000\" stroke-width=\"1\"/>\n\n<!-- Coloring the lines is easy but Im not sure how to also color the triangles at the end  -->\n<!-- this looks hard http://bl.ocks.org/kenpenn/8d782030e4be9d832be7  -->\n\n<!-- The Arrows -->\n<!-- X->Y -->\n<line x1=\"30\" y1=\"75\" x2=\"30\" y2=\"148\" stroke=\"white\" stroke-width=\"2\" opacity=\"OP.XY\" marker-end=\"url(#arrow)\" />\n\n<!-- Z->Y -->\n<line x1=\"150\" y1=\"120\" x2=\"58\" y2=\"162\" stroke=\"white\" stroke-width=\"2\" opacity=\"OP.ZY\" marker-end=\"url(#arrow)\" /> \n<!-- Y->Z -->\n<line x1=\"30\" y1=\"180\" x2=123 y2=\"138\" stroke=\"white\" stroke-width=\"2\" opacity=\"OP.YZ\" marker-end=\"url(#arrow)\" />\n\n<!-- X->Z -->\n<line x1=\"30\" y1=\"60\" x2=\"123\" y2=\"102\" stroke=\"white\" stroke-width=\"2\" opacity=\"OP.XZ\"  marker-end=\"url(#arrow)\" />\n<!-- Z->X -->\n<line x1=\"150\" y1=\"120\" x2=\"58\" y2=\"79\" stroke=\"white\" stroke-width=\"2\" opacity=\"OP.ZX\" marker-end=\"url(#arrow)\" /> \n\n<!-- Interaction -->\n<!-- M first x first y, then Q pivot point X Y, second X Y -->\n<path d=\"M30 135 Q 65 100 75 155\" stroke=\"ColorInteraction\" stroke-width=\"2\" opacity=\"OP.Int\"  /> \n\n\n<!-- The Nodes -->\n<!-- X -->\n<circle cx=\"30\" cy=\"60\" r=\"15\" stroke=\"black\" stroke-width=\"2\" fill=\"white\" />\n<text x=\"30\" y=\"65.5\" fill=\"black\" text-anchor=\"middle\">X<\/text>\n<!-- Y -->\n<circle cx=\"30\" cy=\"180\" r=\"15\" stroke=\"black\" stroke-width=\"2\" fill=\"white\" />\n<text x=\"30\" y=\"185.5\" fill=\"black\" text-anchor=\"middle\">Y<\/text>\n<!-- Z -->\n<circle cx=\"150\" cy=\"120\" r=\"15\" stroke=\"black\" stroke-width=\"2\" fill=\"white\" />\n<text x=\"150\" y=\"125.5\" fill=\"black\" text-anchor=\"middle\">Z<\/text>\n\n\n<!-- The Numbers -->\n<!-- XY -->\n<circle cx=\"30\" cy=\"115\" r=\"12\" style=\"fill:black;\" />\n<text x=\"30\" y=\"120.5\" fill=\"ColorXY\" text-anchor=\"middle\">Num.XY<\/text>\n<!-- ZY -->\n<circle cx=\"95\" cy=\"150\" r=\"12\" style=\"fill:black;\" />\n<text x=\"95\" y=\"155\" fill=\"ColorZY\" text-anchor=\"middle\">Num.ZY<\/text>\n<!-- XZ -->\n<circle cx=\"95\" cy=\"90\" r=\"12\" style=\"fill:black;\" />\n<text x=\"95\" y=\"95\" fill=\"ColorXZ\" text-anchor=\"middle\">Num.XZ<\/text>\n<!-- Interaction -->\n<circle cx=\"60\" cy=\"130\" r=\"12\" style=\"fill:black;\" />\n<text x=\"63\" y=\"130\" fill=\"ColorInteraction\" text-anchor=\"middle\">Num.Interaction<\/text>\n\n\n<!-- The Descriptors -->\n<!-- X -->\n<text x=\"10\" y=\"20\" fill=\"grey\" text-anchor=\"left\" font-style = \"italic\">Independent Variable:<\/text>\n<text x=\"10\" y=\"35\" fill=\"grey\" text-anchor=\"left\" font-style = \"italic\">XNAME<\/text>\n<!-- Y -->\n<text x=\"10\" y=\"220\" fill=\"grey\" text-anchor=\"left\" font-style = \"italic\">Dependent Variable:<\/text>\n<text x=\"10\" y=\"235\" fill=\"grey\" text-anchor=\"left\" font-style = \"italic\">YNAME<\/text>\n<!-- Z -->\n<!-- <text x=\"180\" y=\"125\" fill=\"grey\" text-anchor=\"middle\" font-style = \"italic\" transform=\"rotate(90 180,125)\">Third Variable<\/text> -->\n<!-- <text x=\"165\" y=\"125\" fill=\"grey\" text-anchor=\"middle\" font-style = \"italic\" transform=\"rotate(90 165,125)\">Type<\/text> -->\n<!-- <text x=\"150\" y=\"125\" fill=\"grey\" text-anchor=\"middle\" font-style = \"italic\" transform=\"rotate(90 150,125)\">e.g., Diet<\/text> -->\n\n<text x=\"190\" y=\"125\" fill=\"grey\" text-anchor=\"middle\" font-style = \"italic\" transform=\"rotate(90 190,125)\">Type<\/text>\n<text x=\"145\" y=\"95\" fill=\"grey\" text-anchor=\"middle\" font-style = \"italic\" transform=\"rotate(90 145,125)\">ZNAME<\/text>\n\n<\/svg>\n'\n\n# Edit the SVG for the graph based on the structure and sliders. The changes are called GraphMods\n\noutput$CSGraph <- renderText({\n  if(input$RoleOfZ == 'Noise / Alternative Cause'){\n    if(input$N_SlopeXonY == 0){\n      GraphMods <- c(\"ColorXY\" = \"#FF00FF\",\n                     \"ColorZY\" = \"#00FF00\",\n                     \"ColorXZ\" = \"black\",\n                     \"ColorInteraction\" = \"black\",\n                     \"OP.XY\" = \"0\",\n                     \"OP.ZY\" = \"1\",\n                     \"OP.YZ\" = \"0\",\n                     \"OP.ZX\" = \"0\",\n                     \"OP.XZ\" = \"0\",\n                     \"OP.Int\" = \"0\",\n                     \"Num.XY\" = input$N_SlopeXonY,\n                     \"Num.ZY\" = input$N_SlopeZonY,\n                     \"Num.XZ\" = \"\",\n                     \"Type\" = \"3rd Variable (Noise):\"\n                     # \"XNAME\" = XNAME()\n                     )\n    }\n    else{\n      GraphMods <- c(\"ColorXY\" = \"#FF00FF\",\n                     \"ColorZY\" = \"#00FF00\",\n                     \"ColorXZ\" = \"black\",\n                     \"ColorInteraction\" = \"black\",\n                     \"OP.Int\" = \"0\",\n                     \"OP.XY\" = \"1\",\n                     \"OP.ZY\" = \"1\",\n                     \"OP.YZ\" = \"0\",\n                     \"OP.ZX\" = \"0\",\n                     \"OP.XZ\" = \"0\",\n                     \"Num.XY\" = input$N_SlopeXonY,\n                     \"Num.ZY\" = input$N_SlopeZonY,\n                     \"Num.XZ\" = \"\",\n                     \"Type\" = \"3rd Variable (Noise):\"\n                     # \"XNAME\" = XNAME()\n                     )\n    }\n  }\n    \n    if(input$RoleOfZ == 'Confound / Common Cause'){\n      if(input$CC_SlopeXonY == 0){\n        GraphMods <- c(\"ColorXY\" = \"#FF00FF\",\n                       \"ColorZY\" = \"#00FF00\",\n                       \"ColorXZ\" = \"white\",\n                       \"ColorInteraction\" = \"black\",\n                       \"OP.Int\" = \"0\",\n                       \"OP.XY\" = \"0\",\n                       \"OP.ZY\" = \"1\",\n                       \"OP.YZ\" = \"0\",\n                       \"OP.ZX\" = \"1\",\n                       \"OP.XZ\" = \"0\",\n                       \"Num.XY\" = input$CC_SlopeXonY,\n                       \"Num.ZY\" = input$CC_SlopeZonY,\n                       \"Num.XZ\" = input$CC_SlopeZonX,\n                       \"Type\" = \"3rd Variable (Confound)\"\n        )\n      }\n      else{\n        GraphMods <- c(\"ColorXY\" = \"#FF00FF\",\n                       \"ColorZY\" = \"#00FF00\",\n                       \"ColorXZ\" = \"white\",\n                       \"ColorInteraction\" = \"black\",\n                       \"OP.Int\" = \"0\",\n                       \"OP.XY\" = \"1\",\n                       \"OP.ZY\" = \"1\",\n                       \"OP.YZ\" = \"0\",\n                       \"OP.ZX\" = \"1\",\n                       \"OP.XZ\" = \"0\",\n                       \"Num.XY\" = input$CC_SlopeXonY,\n                       \"Num.ZY\" = input$CC_SlopeZonY,\n                       \"Num.XZ\" = input$CC_SlopeZonX,\n                       \"Type\" = \"3rd Variable (Confound):\"\n        )\n      }\n    }\n\n  if(input$RoleOfZ == 'Alternative Effect'){\n    if(input$AE_SlopeXonY == 0){\n      GraphMods <- c(\"ColorXY\" = \"#9e37eb\",\n                     \"ColorZY\" = \"#00FF00\",\n                     \"ColorXZ\" = \"white\",\n                     \"ColorInteraction\" = \"black\",\n                     \"OP.Int\" = \"0\",\n                     \"OP.XY\" = \"0\",\n                     \"OP.ZY\" = \"0\",\n                     \"OP.YZ\" = \"0\",\n                     \"OP.ZX\" = \"0\",\n                     \"OP.XZ\" = \"1\",\n                     \"Num.XY\" = input$AE_SlopeXonY,\n                     \"Num.ZY\" = '',\n                     \"Num.XZ\" = input$AE_SlopeXonZ,\n                     \"Type\" = \"3rd Variable (Alt. Effect)\"\n      )\n    }\n    else{\n      GraphMods <- c(\"ColorXY\" = \"#9e37eb\",\n                     \"ColorZY\" = \"#00FF00\",\n                     \"ColorXZ\" = \"white\",\n                     \"ColorInteraction\" = \"black\",\n                     \"OP.Int\" = \"0\",\n                     \"OP.XY\" = \"1\",\n                     \"OP.ZY\" = \"0\",\n                     \"OP.YZ\" = \"0\",\n                     \"OP.ZX\" = \"0\",\n                     \"OP.XZ\" = \"1\",\n                     \"Num.XY\" = input$AE_SlopeXonY,\n                     \"Num.ZY\" = '',\n                     \"Num.XZ\" = input$AE_SlopeXonZ,\n                     \"Type\" = \"3rd Variable (Alt Effect):\"\n      )\n    }\n  }\n  \n  if(input$RoleOfZ == 'Mediator / Mechanism'){\n    if(input$M_SlopeXonY == 0){\n      GraphMods <- c(\"ColorXY\" = \"#FF00FF\",\n                     \"ColorZY\" = \"#00FF00\",\n                     \"ColorXZ\" = \"white\",\n                     \"ColorInteraction\" = \"black\",\n                     \"OP.Int\" = \"0\",\n                     \"OP.XY\" = \"0\",\n                     \"OP.ZY\" = \"1\",\n                     \"OP.YZ\" = \"0\",\n                     \"OP.ZX\" = \"0\",\n                     \"OP.XZ\" = \"1\",\n                     \"Num.XY\" = input$M_SlopeXonY,\n                     \"Num.ZY\" = input$M_SlopeZonY,\n                     \"Num.XZ\" = input$M_SlopeXonZ,\n                     \"Type\" = \"3rd Variable (Mediator):\"\n      )\n    }\n    else{\n      GraphMods <- c(\"ColorXY\" = \"#FF00FF\",\n                     \"ColorZY\" = \"#00FF00\",\n                     \"ColorXZ\" = \"white\",\n                     \"ColorInteraction\" = \"black\",\n                     \"OP.Int\" = \"0\",\n                     \"OP.XY\" = \"1\",\n                     \"OP.ZY\" = \"1\",\n                     \"OP.YZ\" = \"0\",\n                     \"OP.ZX\" = \"0\",\n                     \"OP.XZ\" = \"1\",\n                     \"Num.XY\" = input$M_SlopeXonY,\n                     \"Num.ZY\" = input$M_SlopeZonY,\n                     \"Num.XZ\" = input$M_SlopeXonZ,\n                     \"Type\" = \"3rd Variable (Mediator):\"\n      )\n    }\n  }\n  \n    if(input$RoleOfZ == 'Common Effect'){\n      if(input$CE_SlopeXonY == 0){\n        GraphMods <- c(\"ColorXY\" = \"#9e37eb\",\n                       \"ColorZY\" = \"white\",\n                       \"ColorXZ\" = \"white\",\n                       \"ColorInteraction\" = \"black\",\n                       \"OP.Int\" = \"0\",\n                       \"OP.XY\" = \"0\",\n                       \"OP.ZY\" = \"0\",\n                       \"OP.YZ\" = \"1\",\n                       \"OP.ZX\" = \"0\",\n                       \"OP.XZ\" = \"1\",\n                       \"Num.XY\" = input$CE_SlopeXonY,\n                       \"Num.ZY\" = input$CE_SlopeYonZ,\n                       \"Num.XZ\" = input$CE_SlopeXonZ,\n                       \"Type\" = \"3rd Variable (Comm. Eff.):\"\n        )\n      }\n      else{\n        GraphMods <- c(\"ColorXY\" = \"#9e37eb\",\n                       \"ColorZY\" = \"white\",\n                       \"ColorXZ\" = \"white\",\n                       \"ColorInteraction\" = \"black\",\n                       \"OP.Int\" = \"0\",\n                       \"OP.XY\" = \"1\",\n                       \"OP.ZY\" = \"0\",\n                       \"OP.YZ\" = \"1\",\n                       \"OP.ZX\" = \"0\",\n                       \"OP.XZ\" = \"1\",\n                       \"Num.XY\" = input$CE_SlopeXonY,\n                       \"Num.ZY\" = input$CE_SlopeYonZ,\n                       \"Num.XZ\" = input$CE_SlopeXonZ,\n                       \"Type\" = \"3rd Variable (Comm. Eff.):\"\n        )\n      }\n    }\n  if(input$RoleOfZ == 'Interaction / Moderator'){ #never get rid of X->Y even if 0 because looks weird for interaction\n      GraphMods <- c(\"ColorXY\" = \"Red\",\n                     \"ColorZY\" = \"Yellow\",\n                     \"ColorXZ\" = \"black\",\n                     \"ColorInteraction\" = \"dodgerblue\",\n                     \"OP.Int\" = \"1\",\n                     \"OP.XY\" = \"1\",\n                     \"OP.ZY\" = \"1\",\n                     \"OP.YZ\" = \"0\",\n                     \"OP.ZX\" = \"0\",\n                     \"OP.XZ\" = \"0\",\n                     \"Num.XY\" = input$I_SlopeXonY,\n                     \"Num.ZY\" = input$I_SlopeZonY,\n                     \"Num.XZ\" = \"\",\n                     \"Num.Interaction\" = input$I_Interaction,\n                     \"Type\" = \"3rd Variable (Interaction):\"\n                     # \"XNAME\" = XNAME()\n      )\n  }\n  \n  #Adding more graphmods that are common to all the graphs regardless of structure or sliders\n  GraphMods <- c(GraphMods,\n                 \"XNAME\" = XNAME(),\n                 \"YNAME\" = YNAME(),\n                 \"ZNAME\" = ZNAME(),\n                 \"ZNAMEG1\" = ZNAMEG1(),\n                 \"ZNAMEG2\" = ZNAMEG2()\n                 )\n\n  ## GraphMods are actually implemented\n  return(str_replace_all(CSGraph, GraphMods))\n  }) #end of rendertext for causal structure graph\n\n} #end of server\n\n# Run the application \nshinyApp(ui = ui, server = server)\n\n# Colors being used in various places\n# #9e37eb Purple\n# #00FF00 Green\n# #FF00FF Magenta\n# #2993fc Blue or \"dodgerblue\"\n# #fffa40 Yellow\n\n","type":"text"}]
